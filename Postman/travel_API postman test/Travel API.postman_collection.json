{
	"info": {
		"_postman_id": "43551dfb-7d7d-4aab-b34e-ca323a7eb890",
		"name": "Travel API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25134832"
	},
	"item": [
		{
			"name": "(Amik) Add User With Valid Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.id).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_name",
							"value": "amik",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ahmad Mishbah K",
							"type": "text"
						},
						{
							"key": "email",
							"value": "sweet@gmail.com",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "08456795522",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/registration",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Misbah) Add User With Valid Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.id).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.equal('User registered successfully!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_name",
							"value": "mishbah",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Misbah",
							"type": "text"
						},
						{
							"key": "email",
							"value": "amk@gmail.com",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "08571234568",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/registration",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User With Already Taken Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('fail');\r",
							"    pm.expect(responseJson.user_name).to.be.a('string');\r",
							"     pm.expect(responseJson.message).to.equal('User name is already taken!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_name",
							"value": "amik",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ahmad",
							"type": "text"
						},
						{
							"key": "email",
							"value": "ahmad@gmail.com",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "0851234",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/registration",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User with Already Taken Phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('fail');\r",
							"    pm.expect(responseJson.phone).to.be.a('string');\r",
							"     pm.expect(responseJson.message).to.equal('Phone number is already taken!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_name",
							"value": "Amik1234",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Amik",
							"type": "text"
						},
						{
							"key": "email",
							"value": "amik@gmail.com",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "08456795522",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/registration",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User With Already Taken E-mail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('fail');\r",
							"    pm.expect(responseJson.email).to.be.a('string');\r",
							"     pm.expect(responseJson.message).to.equal('E-mail is already taken!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_name",
							"value": "amk",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Mishbah",
							"type": "text"
						},
						{
							"key": "email",
							"value": "sweet@gmail.com",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "0857998744",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/registration",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with User Amik",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.id).to.be.a('string');\r",
							"    pm.expect(responseJson.username).to.be.a('string');\r",
							"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
							"    \r",
							"    pm.environment.set('userIdAmik', responseJson.id);\r",
							"    pm.environment.set('accessTokenAmik', responseJson.accessToken);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_name",
							"value": "amik",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/signin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login With User Misbah",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.id).to.be.a('string');\r",
							"    pm.expect(responseJson.username).to.be.a('string');\r",
							"    pm.expect(responseJson.accessToken).to.be.a('string');\r",
							"    \r",
							"    pm.environment.set('userIdMisbah', responseJson.id);\r",
							"    pm.environment.set('accessTokenMisbah', responseJson.accessToken);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_name",
							"value": "mishbah",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/signin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Amik) Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 201 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.id).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"\r",
							"    pm.environment.set('bookingIdAmik', responseJson.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenAmik}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userid\": \"{{userIdAmik}}\",\r\n    \"departure_date\": \"2023/07/12\",\r\n    \"departure_time\": \"08.00\",\r\n    \"departure_location\": \"BANDUNG\",\r\n    \"destination\": \"KARAWANG\",\r\n    \"passenger_count\": \"5\",\r\n    \"passengers\": [\r\n        {\r\n            \"full_name\": \"Ahmad M K\",\r\n            \"seat\": \"1\"\r\n        },\r\n        {    \r\n            \"full_name\": \"Siti\",\r\n            \"seat\": \"2\"\r\n        },\r\n        {\r\n            \"full_name\": \"Anak 1\",\r\n            \"seat\": \"3\"\r\n        },\r\n        {    \r\n            \"full_name\": \"Anka 2\",\r\n            \"seat\": \"4\"\r\n        },\r\n        {   \r\n            \"full_name\": \"Anaik 3\",\r\n            \"seat\": \"5\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/reservation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"reservation"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Misbah) Create Booking With Already Taken Seat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('fail');\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenMisbah}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userid\": \"{{userIdMisbah}}\",\r\n    \"departure_date\": \"2023/07/12\",\r\n    \"departure_time\": \"08.00\",\r\n    \"departure_location\": \"BANDUNG\",\r\n    \"destination\": \"KARAWANG\",\r\n    \"passenger_count\": \"1\",\r\n    \"passengers\": [\r\n        {\r\n            \"full_name\": \"Mishbah\",\r\n            \"seat\": \"1\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/reservation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"reservation"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Amik) Get All Reservations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.count).to.be.a('number');\r",
							"    pm.expect(responseJson.confirmed_reservation).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenAmik}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "http://localhost:3000/reservation/{{userIdAmik}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"reservation",
						"{{userIdAmik}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Amik) Get Reservation With Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.id).to.be.a('string');\r",
							"    pm.expect(responseJson.totalPrice).to.be.a('number');\r",
							"    pm.expect(responseJson.ticket).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenAmik}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/reservation/{{userIdAmik}}/{{bookingIdAmik}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"reservation",
						"{{userIdAmik}}",
						"{{bookingIdAmik}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Misbah) Get Reservation With Wrong Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 404 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('fail');\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenMisbah}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/reservation/{{userIdMisbah}}/{{bookingIdAmik}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"reservation",
						"{{userIdMisbah}}",
						"{{bookingIdAmik}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Misbah) Change Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.message).to.equal('The user data has been updated');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenMisbah}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "password",
							"value": "akumanis",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/user/{{userIdMisbah}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"{{userIdMisbah}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Misbah) Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {\r",
							"    pm.expect(pm.response).to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.message).to.equal('User account has been deleted');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "x-access-token",
						"value": "{{accessTokenMisbah}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/user/{{userIdMisbah}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"{{userIdMisbah}}"
					]
				}
			},
			"response": []
		}
	]
}